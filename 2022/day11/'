// This is with the test data given in the question

#include <stdio.h>

typedef struct item_t {
  unsigned long long worry;
  struct item_t* next;
  struct item_t* prev;
} item_t;


typedef int monkey_op_t(int);
int monkey_op_0(int old) { return old * 19; }
int monkey_op_1(int old) { return old + 6; }
int monkey_op_2(int old) { return old * old; }
int monkey_op_3(int old) { return old + 3; }

// returns index of monkey to throw to
typedef int monkey_test_t(int);
int monkey_test_0(int v) { return (v % 23) ? 3 : 2; }
int monkey_test_1(int v) { return (v % 19) ? 0 : 2; }
int monkey_test_2(int v) { return (v % 13) ? 3 : 1; }
int monkey_test_3(int v) { return (v % 17) ? 1 : 0; }

typedef struct {

  int inspect_count;
  item_t* first;
  item_t* last;
  monkey_op_t* op;
  monkey_test_t* test;
} monkey_t;

#define arr_count(a) sizeof(a)/sizeof(*a)

static void push_item(monkey_t* m, item_t* item) {
  if (m->last) {
    m->last->next = item;
    m->last = item;
  }
  else {
    m->first = m->last = item;
    item->next = 0;
  }
}

static item_t* pop_item(monkey_t* m) {
  item_t* ret = m->first;
  m->first = m->first->next;
  if (m->first == 0) m->last = 0; 
  ret->next = 0;
  return ret;
}

static int 
get_monkey_business(monkey_t* monkeys, int monkey_count) 
{
  int m1 = -1;
  int m2 = -1;


  for (int i = 0; i < monkey_count; ++i) {
    if (monkeys[i].inspect_count > monkeys[m1].inspect_count) 
      m1 = i;
  }

  for (int i = 0; i < monkey_count; ++i) {
    if (i == m1) continue;  
    if (monkeys[i].inspect_count > monkeys[m2].inspect_count) 
      m2 = i;
  }


  return monkeys[m1].inspect_count * monkeys[m2].inspect_count;

}

static void print_monkeys(monkey_t* monkeys, int monkey_count) {
  for (int i = 0; i < monkey_count; ++i) {
    item_t *itr = monkeys[i].first;
    printf("Monkey #%d: ", i);
    while(itr != 0) {
      printf("%d ", itr->worry);
      itr = itr->next;
    }
    printf("\n");
  }

}

int main() {
  
  item_t items[] = { 
    {79}, {98}, // 0 
    {54}, {65}, {75}, {74}, // 1
    {79}, {60}, {97}, // 2
    {74},  // 3
  };
  monkey_t monkeys[4] = {0};
 
  // init monkeys 
  {
    item_t* item_itr = items;
    monkey_t* monkey_itr = monkeys;
    
    // monkey 0
    push_item(monkey_itr, item_itr++);
    push_item(monkey_itr, item_itr++);
    monkey_itr->op = monkey_op_0;
    monkey_itr->test = monkey_test_0;
    ++monkey_itr;

    // monkey 1 
    push_item(monkey_itr, item_itr++);
    push_item(monkey_itr, item_itr++);
    push_item(monkey_itr, item_itr++);
    push_item(monkey_itr, item_itr++);
    monkey_itr->op = monkey_op_1;
    monkey_itr->test = monkey_test_1;
    ++monkey_itr;

    // monkey 2
    push_item(monkey_itr, item_itr++);
    push_item(monkey_itr, item_itr++);
    push_item(monkey_itr, item_itr++);
    monkey_itr->op = monkey_op_2;
    monkey_itr->test = monkey_test_2;
    ++monkey_itr;

    // monkey 3
    push_item(monkey_itr, item_itr++);
    monkey_itr->op = monkey_op_3;
    monkey_itr->test = monkey_test_3;
    ++monkey_itr;
  }

  printf("=== Round 0 ===\n");
  print_monkeys(monkeys, arr_count(monkeys));

  for (int round = 1; round <= 10000; ++round) 
  {
    for(int monkey_index = 0; 
        monkey_index < arr_count(monkeys); 
        ++monkey_index)
    {
      // inspect each item
      monkey_t* monkey = monkeys + monkey_index;
      while(monkey->first) 
      {
        // monkey inspects item 
        monkey->first->worry = monkey->op(monkey->first->worry);// / 3;

        // monkey transfers item
        int monkey_to_throw = monkey->test(monkey->first->worry);
        //printf("Monkey #%d: Throwing %d to %d\n", monkey_index, monkey->first->worry,  monkey_to_throw);

        item_t* item = pop_item(monkey);
        push_item(monkeys + monkey_to_throw, item);


        monkey->inspect_count++;
      }
    }

    //printf("=== Round %d ===\n", round);
    //print_monkeys(monkeys, arr_count(monkeys));


  }

  printf("Business: %d\n", get_monkey_business(monkeys, arr_count(monkeys)));

  
}

